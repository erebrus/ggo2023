[gd_scene load_steps=20 format=3 uid="uid://ddo5eh8r5r2am"]

[ext_resource type="PackedScene" uid="uid://bncdb8lf6mmoj" path="res://assets/kitchen/cauldron/Cauldron.glb" id="1_06lgo"]

[sub_resource type="CylinderMesh" id="CylinderMesh_6gpgv"]

[sub_resource type="Shader" id="Shader_eu4rb"]
code = "


shader_type spatial;
render_mode specular_toon, cull_disabled;

uniform float speed: hint_range(-1, 1) = 0.0;

uniform sampler2D noise1;
uniform sampler2D noise2;
uniform sampler2D normalmap: hint_normal;

uniform vec4 color : source_color;
uniform vec4 deep_water: source_color;

uniform sampler2D DEPTH_TEXTURE: hint_depth_texture, filter_linear_mipmap;
uniform sampler2D SCREEN_TEXTURE: hint_screen_texture, filter_linear_mipmap;

//depth-fade var
uniform float beer_law_factor = 2.0;
uniform float _distance = 0.0;

//foam var
uniform vec4 edge_color: source_color;
uniform float edge_scale = 0.25;
uniform float near = 0.1;
uniform float far = 100;

// wave var
uniform vec2 wave_strength = vec2(0.5, 0.25);
uniform vec2 wave_frequ = vec2(12.0, 12.0);
uniform vec2 time_factor = vec2(1.0, 2.0);

float waves(vec2 pos, float time) {
	return (wave_strength.y * sin(pos.y * wave_frequ.y + time * time_factor.y)) + (wave_strength.x * sin(pos.x * wave_frequ.x + time * time_factor.x));
}

void vertex() {
	VERTEX.y += waves(VERTEX.xy, TIME);
}

float rim(float depth) {
	depth = 2.0 * depth - 1.0;
	return near * far / (far + depth * (near - far));
}

float calc_depth_fade(float depth, mat4 projection_matrix, 
						vec4 fragcoord, float beer_factor, float __distance, vec3 vertex) {
	
	float scene_depth = depth;

	scene_depth = scene_depth * 2.0 - 1.0;
	scene_depth = projection_matrix[3][2] / (scene_depth + projection_matrix[2][2]);
	scene_depth = scene_depth + vertex.z; // z is negative
	
	// application of beers law
	scene_depth = exp(-scene_depth * beer_factor);
	
	float screen_depth = fragcoord.z;
	
	float depth_fade = (scene_depth - screen_depth) / __distance;
	
	depth_fade = clamp(depth_fade, 0.0, 1.0);
	
	return depth_fade;
}

void fragment() {
	float time = TIME * speed;
	
	vec3 n1 = texture(noise1, UV + time).rgb;
	vec3 n2 = texture(noise2, UV - time * 0.2).rgb;
	
	vec2 uv_movement = UV * 4.0;
	uv_movement += TIME * speed * 4.0;
	
	float sum = (n1.r + n2.r) - 1.0;
	
	float z_depth = rim(texture(DEPTH_TEXTURE, SCREEN_UV).x);
	float z_pos = rim(FRAGCOORD.z);
	float diff = z_depth - z_pos;
	
	// depth-fade
	float z_depth_fade = calc_depth_fade(texture(DEPTH_TEXTURE, SCREEN_UV).x, PROJECTION_MATRIX, FRAGCOORD, beer_law_factor, _distance, VERTEX);
	float z_fade = rim(FRAGCOORD.z);
	float fade_diff = z_depth_fade - z_fade;
	
	vec4 gradientcolor = mix(color, deep_water, z_depth_fade);
	
	vec2 displacement = vec2(sum * 0.1);
	diff += displacement.x * 70.0;
	
	vec4 col = mix(edge_color, gradientcolor, step(edge_scale, diff));
	
	vec4 alpha = texture(SCREEN_TEXTURE, SCREEN_UV + displacement);
	
	
	float fin = 0.0;
	if (sum > 0.0 && sum < 0.4) fin = 0.1;
	if (sum > 0.4 && sum < 0.8) fin = 0.0;
	if (sum > 0.8) fin = 1.0;
	
	// konvertier fin in vec3 um
	ALBEDO = vec3(fin) + mix(alpha.rgb, col.rgb, gradientcolor.a);
	
	EMISSION = ALBEDO.rgb * 2.0;
	NORMAL_MAP = texture(normalmap, uv_movement).rgb;
	
	ROUGHNESS = 0.1;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_yv8bc"]
frequency = 0.0605

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_tb3io"]
noise = SubResource("FastNoiseLite_yv8bc")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_dl0at"]
noise_type = 2
frequency = 0.0545

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_mwto2"]
noise = SubResource("FastNoiseLite_dl0at")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_fhu74"]
render_priority = 0
shader = SubResource("Shader_eu4rb")
shader_parameter/speed = 0.1
shader_parameter/color = Color(0.619608, 0.498039, 0.270588, 1)
shader_parameter/deep_water = Color(0.862745, 0.772549, 0.317647, 1)
shader_parameter/beer_law_factor = 5.0
shader_parameter/_distance = 0.0
shader_parameter/edge_color = Color(0.964706, 0.905882, 0.960784, 1)
shader_parameter/edge_scale = 0.1
shader_parameter/near = 0.1
shader_parameter/far = 100.0
shader_parameter/wave_strength = Vector2(0.1, 0.1)
shader_parameter/wave_frequ = Vector2(20, 20)
shader_parameter/time_factor = Vector2(2, 2)
shader_parameter/noise1 = SubResource("NoiseTexture2D_tb3io")
shader_parameter/noise2 = SubResource("NoiseTexture2D_mwto2")

[sub_resource type="Curve" id="Curve_p7okd"]
_data = [Vector2(0.0194805, 0.452632), 0.0, 0.0, 0, 0, Vector2(1, 1), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_e8qav"]
curve = SubResource("Curve_p7okd")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_xlj7t"]
emission_shape = 3
emission_box_extents = Vector3(0.6, 0.1, 0.6)
gravity = Vector3(0, 0, 0)
scale_curve = SubResource("CurveTexture_e8qav")
color = Color(0.796078, 0.662745, 0.615686, 1)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_xgpg2"]
transparency = 2
alpha_scissor_threshold = 0.5
alpha_antialiasing_mode = 0
albedo_color = Color(0.890196, 0.658824, 0.509804, 1)
emission_enabled = true
emission = Color(0.784314, 0.686275, 0.505882, 1)
emission_energy_multiplier = 11.44

[sub_resource type="SphereMesh" id="SphereMesh_tf4v6"]
material = SubResource("StandardMaterial3D_xgpg2")
radius = 0.2
height = 0.4

[sub_resource type="Gradient" id="Gradient_rgiil"]
offsets = PackedFloat32Array(0, 0.292683, 1)
colors = PackedColorArray(1, 1, 1, 0.470588, 1, 1, 1, 1, 1, 1, 1, 0)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_dnqr7"]
gradient = SubResource("Gradient_rgiil")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_mv72h"]
emission_shape = 3
emission_box_extents = Vector3(0.6, 0.1, 0.6)
direction = Vector3(0, 1, 0)
spread = 8.6
gravity = Vector3(0, 0, 0)
initial_velocity_min = 1.0
initial_velocity_max = 1.0
linear_accel_min = 1.0
linear_accel_max = 2.0
color_ramp = SubResource("GradientTexture1D_dnqr7")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_w5sb7"]
transparency = 1
diffuse_mode = 3
specular_mode = 1
vertex_color_use_as_albedo = true
albedo_color = Color(0.572549, 0.423529, 0.34902, 0.388235)

[sub_resource type="SphereMesh" id="SphereMesh_1n88t"]
material = SubResource("StandardMaterial3D_w5sb7")

[sub_resource type="SphereShape3D" id="SphereShape3D_i6ym5"]
radius = 1.63636

[node name="Cauldron" instance=ExtResource("1_06lgo")]

[node name="Water" type="MeshInstance3D" parent="." index="1"]
transform = Transform3D(2.18689, 0, 0, 0, 0.605803, 0, 0, 0, 2.01023, 0.0312953, 1.50684, -0.00924969)
mesh = SubResource("CylinderMesh_6gpgv")
surface_material_override/0 = SubResource("ShaderMaterial_fhu74")

[node name="GPUParticles3D" type="GPUParticles3D" parent="." index="2"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.97258, 0)
process_material = SubResource("ParticleProcessMaterial_xlj7t")
draw_pass_1 = SubResource("SphereMesh_tf4v6")

[node name="GPUParticles3D2" type="GPUParticles3D" parent="." index="3"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.20597, 0)
amount = 16
process_material = SubResource("ParticleProcessMaterial_mv72h")
draw_pass_1 = SubResource("SphereMesh_1n88t")

[node name="StaticBody3D" type="StaticBody3D" parent="." index="4"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="StaticBody3D" index="0"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.23706, 0)
shape = SubResource("SphereShape3D_i6ym5")
